import React, { useState } from 'react';
import { Heart, MapPin, MessageCircle, Star, Shield, Clock, ChevronLeft, ChevronRight } from 'lucide-react';
import { Listing } from '../types';

interface ListingCardProps {
  listing: Listing;
  onSave?: (id: string) => void;
  onMessage?: (listing: Listing) => void;
  onClick?: (listing: Listing) => void;
}

export function ListingCard({ listing, onSave, onMessage, onClick }: ListingCardProps) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isSaved, setIsSaved] = useState(listing.saved);

  const handleSave = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsSaved(!isSaved);
    onSave?.(listing.id);
  };

  const handleMessage = (e: React.MouseEvent) => {
    e.stopPropagation();
    onMessage?.(listing);
  };

  const nextImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex((prev) => (prev + 1) % listing.images.length);
  };

  const prevImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex((prev) => (prev - 1 + listing.images.length) % listing.images.length);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) return 'Today';
    if (diffDays === 2) return 'Yesterday';
    if (diffDays <= 7) return `${diffDays} days ago`;
    return date.toLocaleDateString();
  };

  return (
    <div
      className="bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer group border border-gray-200 dark:border-gray-700"
      onClick={() => onClick?.(listing)}
    >
      {/* Image Section */}
      <div className="relative aspect-[4/3] overflow-hidden rounded-t-xl">
        <img
          src={listing.images[currentImageIndex]}
          alt={listing.title}
          className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
        
        {/* Image Navigation */}
        {listing.images.length > 1 && (
          <>
            <button
              onClick={prevImage}
              className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-all duration-200"
            >
              <ChevronLeft size={16} />
            </button>
            <button
              onClick={nextImage}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-all duration-200"
            >
              <ChevronRight size={16} />
            </button>
            
            {/* Image Dots */}
            <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 flex space-x-1">
              {listing.images.map((_, index) => (
                <div
                  key={index}
                  className={`w-2 h-2 rounded-full transition-all duration-200 ${
                    index === currentImageIndex ? 'bg-white' : 'bg-white/50'
                  }`}
                />
              ))}
            </div>
          </>
        )}

        {/* Save Button */}
        <button
          onClick={handleSave}
          className="absolute top-3 right-3 p-2 rounded-full bg-white/90 hover:bg-white transition-colors duration-200"
        >
          <Heart
            size={16}
            className={`transition-colors duration-200 ${
              isSaved ? 'text-red-500 fill-current' : 'text-gray-600'
            }`}
          />
        </button>

        {/* Condition Badge */}
        <div className="absolute top-3 left-3 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
          {listing.condition}
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        <div className="flex items-start justify-between mb-2">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white truncate pr-2">
            {listing.title}
          </h3>
          <div className="text-right">
            <div className="text-xl font-bold text-gray-900 dark:text-white">
              ${listing.price.toLocaleString()}
            </div>
            {listing.negotiable && (
              <div className="text-xs text-gray-500">negotiable</div>
            )}
          </div>
        </div>

        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">
          {listing.description}
        </p>

        {/* Location and Distance */}
        <div className="flex items-center text-sm text-gray-500 mb-3">
          <MapPin size={14} className="mr-1" />
          <span>{listing.location.city}, {listing.location.state}</span>
          {listing.location.distance !== undefined && (
            <span className="ml-1">â€¢ {listing.location.distance} mi away</span>
          )}
        </div>

        {/* Seller Info */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <img
              src={listing.seller.avatar}
              alt={listing.seller.name}
              className="w-6 h-6 rounded-full object-cover"
            />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {listing.seller.name}
            </span>
            {listing.seller.verified && (
              <Shield size={14} className="text-blue-500" />
            )}
            <div className="flex items-center space-x-1">
              <Star size={12} className="text-yellow-400 fill-current" />
              <span className="text-xs text-gray-500">{listing.seller.rating}</span>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <div className="flex items-center text-xs text-gray-500">
              <Clock size={12} className="mr-1" />
              {formatDate(listing.postedDate)}
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex space-x-2 mt-4">
          <button
            onClick={handleMessage}
            className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors duration-200"
          >
            <MessageCircle size={16} />
            <span>Message</span>
          </button>
          <button className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            View
          </button>
        </div>
      </div>
    </div>
  );
}
