import React, { useState } from 'react';
import { Send, Search, MoreHorizontal, Star, Shield } from 'lucide-react';
import { chats, currentUser } from '../data/mockData';
import { Chat, Message } from '../types';

export function MessagesPage() {
  const [selectedChat, setSelectedChat] = useState<Chat | null>(chats[0]);
  const [messageInput, setMessageInput] = useState('');
  const [searchQuery, setSearchQuery] = useState('');

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!messageInput.trim() || !selectedChat) return;

    const newMessage: Message = {
      id: `msg-${Date.now()}`,
      senderId: currentUser.id,
      receiverId: selectedChat.participant.id,
      content: messageInput.trim(),
      timestamp: new Date().toISOString(),
      read: false,
    };

    console.log('Sending message:', newMessage);
    setMessageInput('');
  };

  const filteredChats = chats.filter((chat) =>
    chat.participant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    chat.listing.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const mockMessages: Message[] = [
    {
      id: 'msg-1',
      senderId: selectedChat?.participant.id || '',
      receiverId: currentUser.id,
      content: 'Hi! Is the iPhone still available?',
      timestamp: '2024-01-15T10:30:00Z',
      read: true,
    },
    {
      id: 'msg-2',
      senderId: currentUser.id,
      receiverId: selectedChat?.participant.id || '',
      content: 'Yes, it is! When would you like to see it?',
      timestamp: '2024-01-15T10:35:00Z',
      read: true,
    },
    {
      id: 'msg-3',
      senderId: selectedChat?.participant.id || '',
      receiverId: currentUser.id,
      content: 'How about this weekend? I can meet you in downtown SF.',
      timestamp: '2024-01-15T10:40:00Z',
      read: true,
    },
    {
      id: 'msg-4',
      senderId: currentUser.id,
      receiverId: selectedChat?.participant.id || '',
      content: 'That works! Saturday around 2 PM at Union Square?',
      timestamp: '2024-01-15T10:42:00Z',
      read: false,
    },
  ];

  return (
    <div className="flex h-[calc(100vh-4rem)]">
      {/* Chat List */}
      <div className="w-full md:w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Search conversations..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-y-auto">
          {filteredChats.map((chat) => (
            <button
              key={chat.id}
              onClick={() => setSelectedChat(chat)}
              className={`w-full p-4 text-left border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
                selectedChat?.id === chat.id ? 'bg-blue-50 dark:bg-blue-900/20' : ''
              }`}
            >
              <div className="flex items-start space-x-3">
                <img
                  src={chat.participant.avatar}
                  alt={chat.participant.name}
                  className="w-10 h-10 rounded-full object-cover"
                />
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-semibold text-gray-900 dark:text-white truncate">
                      {chat.participant.name}
                    </p>
                    <div className="flex items-center space-x-1">
                      {chat.participant.verified && (
                        <Shield size={12} className="text-blue-500" />
                      )}
                      <span className="text-xs text-gray-500">
                        {formatTime(chat.lastMessage.timestamp)}
                      </span>
                    </div>
                  </div>
                  <p className="text-xs text-gray-600 dark:text-gray-400 truncate mb-1">
                    {chat.listing.title}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400 truncate">
                    {chat.lastMessage.content}
                  </p>
                </div>
                {chat.unreadCount > 0 && (
                  <div className="bg-blue-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {chat.unreadCount}
                  </div>
                )}
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Chat Content */}
      {selectedChat ? (
        <div className="flex-1 flex flex-col">
          {/* Chat Header */}
          <div className="p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <img
                  src={selectedChat.participant.avatar}
                  alt={selectedChat.participant.name}
                  className="w-10 h-10 rounded-full object-cover"
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <h3 className="font-semibold text-gray-900 dark:text-white">
                      {selectedChat.participant.name}
                    </h3>
                    {selectedChat.participant.verified && (
                      <Shield size={14} className="text-blue-500" />
                    )}
                    <div className="flex items-center space-x-1">
                      <Star size={12} className="text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        {selectedChat.participant.rating}
                      </span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    About: {selectedChat.listing.title}
                  </p>
                </div>
              </div>
              <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg">
                <MoreHorizontal size={20} />
              </button>
            </div>
          </div>

          {/* Listing Info */}
          <div className="p-4 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              <img
                src={selectedChat.listing.images[0]}
                alt={selectedChat.listing.title}
                className="w-16 h-16 rounded-lg object-cover"
              />
              <div>
                <h4 className="font-semibold text-gray-900 dark:text-white">
                  {selectedChat.listing.title}
                </h4>
                <p className="text-lg font-bold text-green-600">
                  ${selectedChat.listing.price.toLocaleString()}
                </p>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {mockMessages.map((message) => {
              const isFromCurrentUser = message.senderId === currentUser.id;
              return (
                <div
                  key={message.id}
                  className={`flex ${isFromCurrentUser ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                      isFromCurrentUser
                        ? 'bg-blue-600 text-white rounded-br-sm'
                        : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white rounded-bl-sm'
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p
                      className={`text-xs mt-1 ${
                        isFromCurrentUser ? 'text-blue-100' : 'text-gray-500'
                      }`}
                    >
                      {formatTime(message.timestamp)}
                    </p>
                  </div>
                </div>
              );
            })}
          </div>

          {/* Message Input */}
          <form onSubmit={handleSendMessage} className="p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
            <div className="flex space-x-3">
              <input
                type="text"
                placeholder="Type a message..."
                value={messageInput}
                onChange={(e) => setMessageInput(e.target.value)}
                className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                type="submit"
                disabled={!messageInput.trim()}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors duration-200"
              >
                <Send size={16} />
              </button>
            </div>
            <div className="flex space-x-2 mt-2">
              <button
                type="button"
                className="text-sm text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 px-3 py-1 bg-gray-100 dark:bg-gray-700 rounded-full"
              >
                Is this still available?
              </button>
              <button
                type="button"
                className="text-sm text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 px-3 py-1 bg-gray-100 dark:bg-gray-700 rounded-full"
              >
                What's your best price?
              </button>
            </div>
          </form>
        </div>
      ) : (
        <div className="flex-1 flex items-center justify-center bg-gray-50 dark:bg-gray-900">
          <div className="text-center">
            <p className="text-gray-500 dark:text-gray-400 text-lg">
              Select a conversation to start chatting
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
